package mocks

import mock "github.com/stretchr/testify/mock"
import storage "github.com/gabesullice/phargo/storage"

// Query is an autogenerated mock type for the Query type
type Query struct {
	mock.Mock
}

// Conditions provides a mock function with given fields:
func (_m *Query) Conditions() []storage.Condition {
	ret := _m.Called()

	var r0 []storage.Condition
	if rf, ok := ret.Get(0).(func() []storage.Condition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Condition)
		}
	}

	return r0
}

// Count provides a mock function with given fields:
func (_m *Query) Count() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Range provides a mock function with given fields:
func (_m *Query) Range() (uint, uint) {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 uint
	if rf, ok := ret.Get(1).(func() uint); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(uint)
	}

	return r0, r1
}

// Type provides a mock function with given fields:
func (_m *Query) Type() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

var _ storage.Query = (*Query)(nil)
