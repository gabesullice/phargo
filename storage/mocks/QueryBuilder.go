package mocks

import mock "github.com/stretchr/testify/mock"
import storage "github.com/gabesullice/phargo/storage"

// QueryBuilder is an autogenerated mock type for the QueryBuilder type
type QueryBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *QueryBuilder) Build() (storage.Query, error) {
	ret := _m.Called()

	var r0 storage.Query
	if rf, ok := ret.Get(0).(func() storage.Query); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Query)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Condition provides a mock function with given fields: property, value, operator, negate
func (_m *QueryBuilder) Condition(property string, value interface{}, operator storage.Operator, negate ...bool) storage.ConditionBuilder {
	ret := _m.Called(property, value, operator, negate)

	var r0 storage.ConditionBuilder
	if rf, ok := ret.Get(0).(func(string, interface{}, storage.Operator, ...bool) storage.ConditionBuilder); ok {
		r0 = rf(property, value, operator, negate...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.ConditionBuilder)
		}
	}

	return r0
}

// ConditionGroup provides a mock function with given fields: conjunction
func (_m *QueryBuilder) ConditionGroup(conjunction storage.Conjunction) storage.ConditionBuilder {
	ret := _m.Called(conjunction)

	var r0 storage.ConditionBuilder
	if rf, ok := ret.Get(0).(func(storage.Conjunction) storage.ConditionBuilder); ok {
		r0 = rf(conjunction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.ConditionBuilder)
		}
	}

	return r0
}

// Count provides a mock function with given fields: _a0
func (_m *QueryBuilder) Count(_a0 bool) storage.QueryBuilder {
	ret := _m.Called(_a0)

	var r0 storage.QueryBuilder
	if rf, ok := ret.Get(0).(func(bool) storage.QueryBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.QueryBuilder)
		}
	}

	return r0
}

// Range provides a mock function with given fields: offset, limit
func (_m *QueryBuilder) Range(offset int, limit int) storage.QueryBuilder {
	ret := _m.Called(offset, limit)

	var r0 storage.QueryBuilder
	if rf, ok := ret.Get(0).(func(int, int) storage.QueryBuilder); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.QueryBuilder)
		}
	}

	return r0
}

var _ storage.QueryBuilder = (*QueryBuilder)(nil)
